<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true">
	<!-- 上下文名称 -->
	<contextName>order</contextName>

	<!-- 日志输出格式 -->
	<!-- %m输出的信息,%p日志级别,%t线程名,%d日期,%c类的全名,,,, -->
	<!--格式化输出：%d:表示日期 %thread:表示线程名 %-5level:级别从左显示5个字符宽度 %msg:日志消息 %n:是换行符 -->
	<property name="ENCODER_PATTERN"
		value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %X{mdcData} [%15thread] %-40.40logger{39} Line:%-4L : %msg%n" />

	<!-- 日志基本路径 -->
	<property name="BASE_LOG_DIR" value="${catalina.home}/logs/vsj_order" />

	<!-- 控制台日志：输出全部日志到控制台 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>${ENCODER_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<!-- 说明： 1、日志级别及文件 日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中 例如：error级别记录到vsj_error_xxx.log或vsj_error.log（该文件为当前记录的日志文件），而vsj_error_xxx.log为归档日志， 
		日志文件按日期记录，同一天内，若日志文件大小等于或大于20M，则按0、1、2...顺序分别命名 例如vsj-level-2013-12-21.0.log 
		其它级别的日志也是如此。 2、文件路径 若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。 
		若部署到Tomcat下，则在Tomcat下的logs文件中 3、Appender FILEERROR对应error级别，文件名以vsj-error-xxx.log形式命名 
		FILEWARN对应warn级别，文件名以vsj-warn-xxx.log形式命名 FILEINFO对应info级别，文件名以vsj-info-xxx.log形式命名 
		FILEDEBUG对应debug级别，文件名以vsj-debug-xxx.log形式命名 CONSOLE将日志信息输出到控制上，为方便开发测试使用 -->
	<!-- 错误日志：用于将错误日志输出到独立文件 -->
	<appender name="FILEERROR"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${BASE_LOG_DIR}_error.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 
				而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${BASE_LOG_DIR}_error_%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过20M，若超过20M，日志文件会以索引0开始， 命名日志文件，例如vsj-error-2013-12-21.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>20MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<MaxHistory>3</MaxHistory>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${ENCODER_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<!-- 此日志文件只记录error级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>error</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 告警日志：用于将告警日志输出到独立文件 -->
	<appender name="FILEWARN"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${BASE_LOG_DIR}_warn.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 
				而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${BASE_LOG_DIR}_warn_%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过20M，若超过20M，日志文件会以索引0开始， 命名日志文件，例如vsj-error-2013-12-21.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>20MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<MaxHistory>3</MaxHistory>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${ENCODER_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<!-- 此日志文件只记录warn级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>warn</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 信息日志：用于将信息日志输出到独立文件 -->
	<appender name="FILEINFO"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${BASE_LOG_DIR}_info.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 
				而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${BASE_LOG_DIR}_info_%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过20M，若超过20M，日志文件会以索引0开始， 命名日志文件，例如vsj-error-2013-12-21.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>20MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<MaxHistory>3</MaxHistory>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${ENCODER_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<!-- 此日志文件只记录info级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>info</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- debug日志：用于将debug日志输出到独立文件 -->
	<appender name="FILEDEBUG"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 正在记录的日志文件的路径及文件名 -->
		<file>${BASE_LOG_DIR}_debug.log</file>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 归档的日志文件的路径，例如今天是2013-12-21日志，当前写的日志文件路径为file节点指定，可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 
				而2013-12-21的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 -->
			<fileNamePattern>${BASE_LOG_DIR}_debug_%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!-- 除按日志记录之外，还配置了日志文件不能超过20M，若超过20M，日志文件会以索引0开始， 命名日志文件，例如vsj-error-2013-12-21.0.log -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>20MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<MaxHistory>3</MaxHistory>
		</rollingPolicy>
		<!-- 追加方式记录日志 -->
		<append>true</append>
		<!-- 日志文件的格式 -->
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${ENCODER_PATTERN}</pattern>
			<charset>UTF-8</charset>
		</encoder>
		<!-- 此日志文件只记录debug级别的 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>debug</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"> 
		<encoder> <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%-20thread] %logger{50} 
		: %msg%n</pattern> <charset>utf-8</charset> </encoder> </appender> -->
	<logger name="com.minlia" level="DEBUG" />
	<logger name="org.springframework.data.mybatis" level="DEBUG" />
	<logger name="org.springframework.aop.aspectj" level="ERROR" />
	<logger name="org.apache.http.wire" level="OFF" />

	<root level="DEBUG">
		<appender-ref ref="FILEERROR" />
		<appender-ref ref="FILEWARN" />
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILEDEBUG" />
		<appender-ref ref="FILEINFO" />
	</root>

</configuration>