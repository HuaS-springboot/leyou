<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <artifactId>cloud_parent</artifactId>
        <groupId>com.vsj</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <artifactId>eureka-server</artifactId>
    <properties>
        <docker.repository.url>registry.cn-qingdao.aliyuncs.com</docker.repository.url>
        <docker.repository.namespace>vsj_images</docker.repository.namespace>
        <docker.repository.serverId>docker-aliyun</docker.repository.serverId>
    </properties>
    <build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <configuration>
                <!-- 指定该Main Class为全局的唯一入口 -->
                <mainClass>com.vsj.AdminServiceApplication</mainClass>
                <layout>ZIP</layout>
            </configuration>
            <executions>
                <execution>
                    <goals>
                        <goal>repackage</goal><!--可以把依赖的包都打包到生成的Jar包中-->
                    </goals>
                </execution>
            </executions>
        </plugin>
        <plugin>
            <groupId>com.spotify</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.4.3</version>
            <executions>
                <execution>
                    <id>build-image</id>
                    <!--将插件绑定在package这个phase上。也就是说，用户只需执行mvn package ，就会自动执行mvn docker:build-->
                    <phase>package</phase>
                    <goals>
                        <goal>build</goal>
                    </goals>
                </execution>
            </executions>
            <configuration>
                <forceTags>true</forceTags>    <!--覆盖相同标签镜像-->
                <pushImage>true</pushImage> <!-- 开启docker推送镜像 -->
                <!-- 指定生成的镜像名 -->
                <imageName>${docker.repository.url}/${docker.repository.namespace}/${project.artifactId}:${project.version}</imageName>
                <!-- 指定版本号 -->
                <imageTags>
                    <imageTag>${project.version}</imageTag>
                </imageTags>
                <!--maven仓库对应的私库账号密码的ID 注意:配置在settings.xml文件中的-->
                <serverId>${docker.repository.serverId}</serverId>
                <!--私库地址-->
                <registryUrl>${docker.repository.namespace}</registryUrl>
                <!--dockerfile文件路径-->
                <dockerDirectory>${project.basedir}/src/main/Docker</dockerDirectory>
                <!--docker外网api地址-->
                <dockerHost>http://39.98.39.33:2375</dockerHost>
                <resources>
                    <resource>
                        <targetPath>/</targetPath>
                        <directory>${project.build.directory}</directory>
                        <include>${project.build.finalName}.jar</include>
                    </resource>
                </resources>
            </configuration>
        </plugin>
    </plugins>
    </build>
</project>
